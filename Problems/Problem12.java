package com.euler;

/**
 * Highly divisible triangular number
 * 
 * Problem 12
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 *
 * 
 */
public class Problem12 {

	public static void main(String[] args) {

		 System.out.println(largestDivisior());

	}

	private static long largestDivisior() {
		long sum = 0;
		for (long i = 13100; i < Long.MAX_VALUE; i++) {
			sum=(i*(i+1))/2;
			if (!(isPrime(sum)) && isDiversiorEqualTo500(sum) >= 500) {
				System.out.println(sum);
				return sum;
			}
		}
		return sum;
	}

	private static boolean isPrime(long n) {
		if (n <= 1)
			return false;
		if (n <= 3) 
			return true;
		
		if (n % 2 == 0 || n % 3 == 0)
			return false;
		for (int i = 5; i * i <= n; i += 6)
			if (n % i == 0 || n % (i + 2) == 0)
				return false;

		return true;
	}

	private static long isDiversiorEqualTo500(long sum) {
		if (sum == 1)
			return 1;
		long divisorCount = 0;
		for (long i = 2; i <= sum / 2; i++)
			if (sum % i == 0)
				divisorCount++;

		System.out.println(sum + " : " + (divisorCount + 2));
		return divisorCount + 2;
	}

}

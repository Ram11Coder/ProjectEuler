package com.euler;

/**
 * Highly divisible triangular number
 * 
 * Problem 12
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 *
 * 
 */
public class Problem12 {

	public static void main(String[] args) {
		long past = System.currentTimeMillis();
		System.out.println(largestDivisior());
		System.out.println((System.currentTimeMillis() - past) / 1000.0 + "sec");
	}

	private static long largestDivisior() {
		long sum = 0;
		for (long i = 1000; i < Long.MAX_VALUE; i++) {
			sum = (i * (i + 1)) / 2;
			if (!(isPrime(sum)) && isDiversiorEqualTo500(sum) >= 500)
				return sum;
		}
		return sum;
	}

	private static boolean isPrime(long n) {
		if (n <= 1)
			return false;
		if (n <= 3)
			return true;

		if (n % 2 == 0 || n % 3 == 0)
			return false;
		for (int i = 5; i * i <= n; i += 6)
			if (n % i == 0 || n % (i + 2) == 0)
				return false;

		return true;
	}

	// Finding the divisor
	private static long isDiversiorEqualTo500(long sum) {
		if (sum == 1)
			return 1;
		long divisorCount = 0;
		int sqr = (int) Math.sqrt(sum);
		for (long i = 1; i <= sqr; i++)
			if (sum % i == 0)
				divisorCount += 2;
		if (sqr * sqr == sum) {
			divisorCount--;
		}

		return divisorCount;
	}

}
